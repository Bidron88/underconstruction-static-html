@import url("//fonts.googleapis.com/css?family=Open+Sans:400,600,700,800");html{font-family:sans-serif;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%;box-sizing:border-box}*,:after,:before{box-sizing:inherit}body{margin:0;background-color:#fff;font-family:Open Sans,Helvetica,Arial,sans-serif;font-size:16px;font-size:1rem}hr{border:none;border-bottom:.05rem solid rgba(0,0,0,.1);margin:30px 0}p{font-size:16px;font-size:1rem}h1,h2,h3,h4,h5,h6,p{margin:0 0 .9375rem}h1{font-size:32px;font-size:2rem}h2{font-size:30px;font-size:1.875rem}h3{font-size:28px;font-size:1.75rem}h4{font-size:24px;font-size:1.5rem}h5{font-size:20px;font-size:1.25rem}h6{font-size:18px;font-size:1.125rem}code,pre{font-family:monospace,serif;font-size:1em;font-size:.0625rem}pre{white-space:pre;white-space:pre-wrap;word-wrap:break-word}small{font-size:80%;font-size:5rem}button,input,select,textarea{font-family:inherit;font-size:100%;font-size:6.25rem;margin:0}textarea{vertical-align:top}table{border-collapse:collapse;border-spacing:0}.hero,.main-container,body,html{width:100%;height:100%}.header{width:100%;padding:35px}.header__logo{margin:0}.header__logo a{text-indent:-99999px;display:inline-block;background:url(../images/sobmedida-logo.png) no-repeat 50%;width:223px;height:71px}.footer{width:100%;padding:35px}.footer__left,.footer__right{font-size:14px;font-size:.875rem;letter-spacing:-.3px}.footer__left{float:left;color:#898999}.footer__right{text-align:right;float:right}.footer__right,.footer__right a{color:#898999;opacity:.75}.clearfix:after{content:"";display:table;clear:both}.show{display:block;opacity:1;visibility:visible}.hide{display:none;opacity:0;visibility:hidden}.pull-left{float:left!important}.pull-right{float:right!important}.text-center{text-align:center!important}.video-wrapper{position:relative;padding-bottom:56.25%;padding-top:25px;height:0}.video-wrapper embed,.video-wrapper iframe,.video-wrapper object{position:absolute;top:0;left:0;width:100%;height:100%}.button{height:74px;border-radius:5px;background-color:#096315;box-shadow:0 5px 19px 0 rgba(0,100,111,.08);border:1px solid rgba(0,100,111,.08);font-weight:500;line-height:inherit;color:#fff;cursor:pointer}.button,.form__input{width:100%;font-size:21px;font-size:1.3125rem;letter-spacing:-.4px;appearance:none}.form__input{line-height:74px;border-radius:5px;background:none #fff;box-shadow:0 9px 30px 0 rgba(117,181,188,.21);border:1px solid rgba(117,181,188,.21);color:#b2b2ba;padding:0 35px}.hero{background:url(../images/hero-bg.jpg) no-repeat 50%;background-size:cover}.hero .form,.hero__lead,.hero__title{max-width:560px}.hero__title{font-size:56px;font-size:3.5rem;line-height:1;letter-spacing:-.4px;color:#505069;margin-bottom:25px}.hero__title,.hero__title strong{font-weight:800}.hero__lead{font-size:21px;font-size:1.3125rem;font-weight:500;line-height:1.57;letter-spacing:-.4px;color:#505069;margin-bottom:25px}.hero__left{background-color:#fff;padding:35px;width:100%}@media only screen and (min-width:768px){.hero,.main-container,body,html{overflow:hidden}.header{top:0}.footer,.header{position:fixed;right:0;left:0}.footer{bottom:0}.footer__right,.footer__right a{color:#fff}.hero .form{display:flex;align-items:center}.hero .form .form__input{border-top-right-radius:0;border-bottom-right-radius:0}.hero .form .button{border-top-left-radius:0;border-bottom-left-radius:0}.hero__left{max-width:600px;align-items:center;justify-content:center;display:flex;height:100vh}}@media only screen and (min-width:992px){.hero__left{max-width:50%}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
